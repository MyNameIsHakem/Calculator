using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading;
using System.Text.RegularExpressions;
using System.Windows.Forms;

namespace First_Windows_Forms_App
{
    public partial class Box : Form
    {
        /// <summary>
        /// SO Thechniclly this constructor calls in this method which is in the
        /// "form1.Disigner"(solution) and what it does is create the forms 
        /// and asign to them properties(size,..) and when we double click a 
        /// form  we creat a method (event handler) that will activate each  
        ///time we press this form and this is automaticlly generated by .net in 
        /// this method below and when we double click we will add to the 
        /// form an event called "click" which is defined within the system 
        /// and which rise only by clicking on the form .Besides the framework
        /// will subscribe the method created to the event "click" and it's
        /// Writen within the form properties(method below) syntax is like this:
        /// "(a form).Click +=new System.Eventhandler(method name)"
        /// and by this syntax it has defined the subscribers (method name)  
        /// and the rising Condition (Click event)
        /// </summary>
        public Box()
        {
            InitializeComponent();
            textBox1.KeyPress += ChekingTypedInput;
        }

        private void ChekingTypedInput(object sender, KeyPressEventArgs e)
        {                                    
            string button = e.KeyChar.ToString();            
            Match match = Regex.Match(button, @"[0-9]");
            Match match2 = Regex.Match(button, @"[+/*,-]");
            Match match3 = Regex.Match(button, @"\(");            
            Match match4 = Regex.Match(button, @"\)");
            Match match5 = Regex.Match(button, @"[\b]");
            if (match.Success ==false && match2.Success ==false && match3.Success ==false 
                && match4.Success==false && match5.Success == false)
                e.Handled = true;                                    
            
        }



        #region Useless
        private void tableLayoutPanel1_Paint(object sender, PaintEventArgs e)
        {

        }
        private void Operation_TextChanged(object sender, EventArgs e)
        {

        }
        #endregion

        #region Back , Erase and BackWard

        public List<double> Results = new();
        public List<string> Input = new();


        private void BackWard(object sender, EventArgs e)
        {

            int ResultCount = Results.Count;
            int InputCount = Input.Count;

            if (ResultCount == 1 || ResultCount == 0)
                goto insteed;

            ResultCount -= 2;
            ResultDisplayer.Text = Results[ResultCount].ToString();
            Results.RemoveAt(Results.Count - 1);

        insteed:
            if (InputCount == 0 || InputCount == 1)
                return;

            InputCount -= 2;
            textBox1.Text = Input[InputCount];
            Input.RemoveAt(Input.Count - 1);

        }
        private void button2_Click(object sender, EventArgs e)
        {
            textBox1.Text = textBox1.Text.Remove(0, textBox1.Text.Length);
            ResultDisplayer.Text = ResultDisplayer.Text.Remove(0, ResultDisplayer.Text.Length);
            vs1.Clear();

            ParentTheSizePairs.Clear();

            Results.Clear();
            Input.Clear();
        }       

        private void button1_Click(object sender, EventArgs e)
        {
            List<int> OperatorIndex = new();
            var selectionStart = textBox1.SelectionStart;            

            if (textBox1.Text.Length == 0)
                return;           
            else if (textBox1.Text.Length >= textBox1.SelectionStart)
            {
                if (textBox1.Text[textBox1.SelectionStart - 1] == ')')
                {
                    foreach(var varibale in ParentTheSizePairs)
                    {
                        if (varibale.Value == textBox1.SelectionStart - 1)
                            ParentTheSizePairs.Remove(varibale.Key);
                    }
                } else if (textBox1.Text[textBox1.SelectionStart - 1] == '(')
                {
                    foreach (var varibale in ParentTheSizePairs)
                    {
                        if (varibale.Key == textBox1.SelectionStart - 1)
                            ParentTheSizePairs.Remove(varibale.Key);
                    }
                }
                textBox1.Text = textBox1.Text.Remove(textBox1.SelectionStart - 1, 1);                
            }

            vs1.Clear();
            textBox1.SelectionStart = selectionStart - 1;

            
        }     
        
        #endregion

        #region Numbers and Displayed
        private void btn_0_Click(object sender, EventArgs e)
        {
            InsertValue("0");
            
        }       

        private void btn_9_Click(object sender, EventArgs e)
        {
            InsertValue("9");
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            InsertValue("8");
        }       

        private void btn_1_Click(object sender, EventArgs e)
        {
            InsertValue("1");
        }

        private void btn_2_Click(object sender, EventArgs e)
        {
            InsertValue("2");
        }

        private void btn_3_Click(object sender, EventArgs e)
        {
            InsertValue("3");
        }

        private void btn_4_Click(object sender, EventArgs e)
        {
            InsertValue("4");
        }

        private void btn_5_Click(object sender, EventArgs e)
        {
            InsertValue("5");
        }

        private void btn_6_Click(object sender, EventArgs e)
        {
            InsertValue("6");
        }

        private void btn_7_Click(object sender, EventArgs e)
        {
            InsertValue("7");
        }

        private void btn_comma_Click(object sender, EventArgs e)
        {

            string input = textBox1.Text;
            if (textBox1.Text.Length != 0)
            {                
                MatchCollection matchesSeconder = Regex.Matches(input, @"[0-9]");
                foreach(Match match in matchesSeconder)
                {
                    input = input.Replace(match.ToString(), "a");
                }
                MatchCollection matches = Regex.Matches(input, @"\W");
                foreach (Match match in matches)
                {
                    if (match.Index == textBox1.SelectionStart - 1)
                        goto end;
                }
            }
            else
                goto end;

            string[] strArray = input.Split('+', '-', '/', '*',')','(');
            int strTrackIndexer = 0;
            int y = 0;

            for (int i = 0; i < strArray.Length; i++)
            {
                if(y == 0)
                {
                    strTrackIndexer += strArray[i].Length;
                    y++;
                }
                else
                {
                    strTrackIndexer += strArray[i].Length + 1;
                }

                if (textBox1.SelectionStart <= strTrackIndexer)
                {
                    if (strArray[i].Contains(','))
                        goto end;
                   else
                        InsertValue(",");
                }                
            }
        


            end:;
        }

        public Dictionary<int, int> ParentTheSizePairs = new();
       
        private void ParentTheSize(object sender, EventArgs e)
        {
            try
            {
                string input = textBox1.Text;

                if (textBox1.Text.Length != 0)
                    if (textBox1.Text[textBox1.SelectionStart - 1] == ',')
                        return;
                if (textBox1.Text.Length == 0)
                {
                    InsertValue("(");
                    return;
                }


                MatchCollection leftNum = Regex.Matches(textBox1.Text, @"[(]");
                MatchCollection RightNum = Regex.Matches(textBox1.Text, @"[)]");
                bool UsingLeftSide = Regex.Match(input[textBox1.SelectionStart - 1].ToString(), @"[+/*-]").Success;

                if (UsingLeftSide == true)
                {
                    InsertValue("(");
                }
                else
                {
                    if (leftNum.Count == RightNum.Count)
                    {
                        InsertValue("*(");
                    }
                    else
                    {
                        InsertValue(")");                        
                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }         
                
        }
        private void InsertValue(string value)
        {
            var selectionStart = textBox1.SelectionStart;

            textBox1.Text = textBox1.Text.Insert(textBox1.SelectionStart, value);

            textBox1.SelectionStart = selectionStart + value.Length;
            
        }
        #endregion

        #region Calculation

        private void DealingWithNegativeValue(ref string input)
        {
            input = input.Replace("+-", "-");
            input = input.Replace("-+", "-");
            input = input.Replace("--", "+");
        }
        private void Operator_Click(object sender, EventArgs e)
        {            
            Button button = (Button)sender;

            if(button == btn_plus)
            {               
                CheckingDuplicated(button);
            }
            else if(button == btn_mines)
            {                
                CheckingDuplicated(button);
            }
            else if(button == btn_multiply)
            {                
                CheckingDuplicated(button);
            }
            else if(button == btn_divide)
            {               
                CheckingDuplicated(button);
            }
            else if(button == btn_result)
            {                
                string input = textBox1.Text;
                if (input.Length == 0)
                    return;

                MatchCollection matches = Regex.Matches(input, @"\([-]*[0-9]+\)");
                Input.Add(input);
                foreach(Match match in matches)
                {
                    input = input.Replace(match.ToString(), match.ToString().Substring(1, match.ToString().Length - 2));
                }

                DealingWithNegativeValue(ref input);


                char some = textBox1.Text.Last();
                if (some == '+' || some == '-' || some == '/' || some == '*'||some == ',')
                    goto message;

                MatchCollection matchesLeft = Regex.Matches(input, @"[(]");
                MatchCollection matchesRight = Regex.Matches(input, @"[)]");
                



                if (matchesLeft.Count == 0)
                {
                    List<string> vs = new() { input };
                    vs1.Add(15);
                    Calculation(vs);

                }
                else if(matchesLeft.Count == matchesRight.Count)
                {
                    List<int> Indexers = new();
                    foreach (Match match4 in matchesLeft)
                    {
                        Indexers.Add(match4.Index);
                    }

                    List<int> Falseindexers = new();
                    List<int> LenghtOfParentTheSize = new();
                    foreach (Match match1 in matchesRight)
                    {
                        foreach (int match2 in Indexers)
                        {
                            Falseindexers.Add(match1.Index - match2);
                        }
                        Falseindexers = Falseindexers.Where(x => x > 0).ToList();
                        int MinValueIndex = match1.Index - Falseindexers.Min();
                        LenghtOfParentTheSize.Add(Falseindexers.Min());
                        Indexers.Remove(MinValueIndex);
                        Falseindexers.Clear();
                    }

                    int t = 0;
                    foreach (Match match3 in matchesRight)
                    {
                        ParentTheSizePairs.Add(match3.Index - LenghtOfParentTheSize[t], match3.Index);
                        t++;
                    }

                    List<string> Intern = new();
                    foreach(var varibale in ParentTheSizePairs)
                    {
                        Intern.Add(input.Substring(varibale.Key, varibale.Value - varibale.Key+1));
                    }

                    Calculation(Intern);                   

                }
                else
                {
                    MessageBox.Show("you are messing a parent the size please check your input again");
                }                           

                message: if (input.Last() == '+' || input.Last() == '-' || input.Last() == '/' || input.Last() == '*')
                    MessageBox.Show("Please check again your last input");
            }

        }
        public List<int> vs1 = new();
        private void Calculation(List<string> op)
        {
            if (vs1.Count == 1)
            {
                string input = op[0];

                MatchCollection matches = Regex.Matches(input, @"([0-9]+[,]*[0-9]*\*[-]*)+");

                foreach (Match match in matches)
                {
                    string jetable = op[0];

                    jetable = jetable.Substring(match.Index, jetable.IndexOf('+', match.Index) == -1 ? jetable.Length - (match.Index) : jetable.IndexOf('+', match.Index) - match.Index);
                    jetable = jetable.Substring(0, jetable.IndexOf('/') == -1 ? jetable.Length : jetable.IndexOf('/'));
                    jetable = jetable.Substring(0, jetable.IndexOf('-',match.ToString().Length) == -1 ? jetable.Length : jetable.IndexOf('-', match.ToString().Length));

                    input = input.Replace(jetable, MethodForMultiplication(jetable));
                }

                DealingWithNegativeValue(ref input);

                MatchCollection matches2 = Regex.Matches(input, @"([0-9]+[,]*[0-9]*\/[-]*)+");

                string discard = input;
                foreach (Match matche in matches2)
                {
                    string jetable = discard;

                    jetable = jetable.Substring(matche.Index, jetable.IndexOf('+', matche.Index) == -1 ? jetable.Length - (matche.Index) : jetable.IndexOf('+', matche.Index) - matche.Index);
                    jetable = jetable.Substring(0, jetable.IndexOf('*') == -1 ? jetable.Length : jetable.IndexOf('*'));
                    jetable = jetable.Substring(0, jetable.IndexOf('-', matche.ToString().Length) == -1 ? jetable.Length : jetable.IndexOf('-', matche.ToString().Length));

                    input = input.Replace(jetable, MethodForDividing(jetable));
                }

                DealingWithNegativeValue(ref input);

                do
                {
                    MatchCollection matches3 = Regex.Matches(input, @"([-]*[0-9]+[,]*[0-9]*\+)+");

                    string discard2 = input;
                    foreach (Match matche in matches3)
                    {
                        string jetable = discard2;

                        jetable = jetable.Substring(matche.Index, jetable.IndexOf('-', matche.Index + 1) == -1 ?
                                                jetable.Length - (matche.Index) : jetable.IndexOf('-', matche.Index + 1) - matche.Index);

                        input = input.Replace(jetable, MethodForSum(jetable));
                    }

                    DealingWithNegativeValue(ref input);

                } while (input.Contains('+'));
               

                List<string> FinalOperation = input.Split('-').ToList();
                double[] nums = new double[FinalOperation.Count];
                int y = 0;

                for (var l = 0; l < FinalOperation.Count; l++)
                {
                    if (y == 0 && FinalOperation[0] == "")
                    {
                        FinalOperation.RemoveAt(0);
                        FinalOperation[0] = "-" + FinalOperation[0];
                    }

                    nums[y] = double.Parse(FinalOperation[y]);
                    y++;
                }
                double result = nums.Aggregate((x, y) => x - y);
                ResultDisplayer.Text = result.ToString();

                nums = Array.Empty<double>();
                Results.Add(result);
                vs1.Clear();
                ParentTheSizePairs.Clear();
            }
            else
            {
                string Variable = textBox1.Text;

                MatchCollection matchess = Regex.Matches(Variable, @"\([-]*[0-9]+\)");                
                foreach (Match match in matchess)
                {
                    Variable = Variable.Replace(match.ToString(), match.ToString().Substring(1, match.ToString().Length - 2));
                }
                DealingWithNegativeValue(ref Variable);

                do
                {
                    for (int i = 0; i < op.Count; i++)
                    {
                        string TakeThis = op[i];

                        DealingWithNegativeValue(ref TakeThis);

                        var match = Regex.Match(TakeThis, @"\(([-]*[0-9]+[,]*[0-9]*\W*)+\W*[0-9]+[,]*[0-9]*\)");

                        string GonnaBeCalculated = match.ToString().Substring(1, match.ToString().Length - 2);

                        if (match.Success == true)
                        { 

                            for (int y = 0; y < op.Count; y++)
                            {
                                if (op[y].Contains(TakeThis))
                                {
                                    op[y] = op[y].Replace(TakeThis, CalculateForParentTheSize(GonnaBeCalculated));
                                    op[y] = op[y].Replace("+-", "-");
                                    op[y] = op[y].Replace("-+", "-");
                                    op[y] = op[y].Replace("--", "+");
                                }                                    
                            }
                             Variable = Variable.Replace(TakeThis, CalculateForParentTheSize(GonnaBeCalculated));
                            DealingWithNegativeValue(ref Variable);
                        }
                        

                    }

                } while (Variable.Contains('('));
                

                List<string> vs = new() { Variable };
                vs1.Add(15);
                Calculation(vs);
        
            }
           
        }
        private string CalculateForParentTheSize(string input)
        {
            MatchCollection matches = Regex.Matches(input, @"([0-9]+[,]*[0-9]*\*[-]*)+");

            string put = input;
            foreach (Match match in matches)
            {
                string jetable = put;
                jetable = jetable.Substring(match.Index, jetable.IndexOf('+', match.Index) == -1 ? jetable.Length - (match.Index) : jetable.IndexOf('+', match.Index) - match.Index);
                jetable = jetable.Substring(0, jetable.IndexOf('-',match.ToString().Length) == -1 ? jetable.Length : jetable.IndexOf('-',match.ToString().Length));
                jetable = jetable.Substring(0, jetable.IndexOf('/') == -1 ? jetable.Length : jetable.IndexOf('/'));
                input = input.Replace(jetable, MethodForMultiplication(jetable));
            }

            DealingWithNegativeValue(ref input);

            MatchCollection matches2 = Regex.Matches(input, @"([0-9]+[,]*[0-9]*\/[-]*)+");

            string discard = input;
            foreach (Match matche in matches2)
            {
                string jetable = discard;
                jetable = jetable.Substring(matche.Index, jetable.IndexOf('+', matche.Index) == -1 ? jetable.Length - (matche.Index) : jetable.IndexOf('+', matche.Index) - matche.Index);
                jetable = jetable.Substring(0, jetable.IndexOf('-',matche.ToString().Length) == -1 ? jetable.Length : jetable.IndexOf('-',matche.ToString().Length));
                jetable = jetable.Substring(0, jetable.IndexOf('*') == -1 ? jetable.Length : jetable.IndexOf('*'));
                input = input.Replace(jetable, MethodForDividing(jetable));
            }

            DealingWithNegativeValue(ref input);

            MatchCollection matches3 = Regex.Matches(input, @"([-]*[0-9]+[,]*[0-9]*\+)+");

            string discard2 = input;
            foreach (Match matche in matches3)
            {
                string jetable = discard2;
                jetable = jetable.Substring(matche.Index, jetable.IndexOf('-', matche.Index + 1) == -1 ?
                                        jetable.Length - (matche.Index) : jetable.IndexOf('-', matche.Index + 1) - matche.Index);

                input = input.Replace(jetable, MethodForSum(jetable));
            }

            DealingWithNegativeValue(ref input);

            List<string> FinalOperation = input.Split('-').ToList();


            double[] nums = new double[FinalOperation.Count];
            int y = 0;

            for (var l = 0; l < FinalOperation.Count; l++)
            {
                if (y == 0 && FinalOperation[0] == "")
                {
                    FinalOperation.RemoveAt(0);
                    FinalOperation[0] = "-" + FinalOperation[0];
                }

                nums[y] = double.Parse(FinalOperation[y]);
                y++;
            }

            double result = nums.Aggregate((x, y) => x - y);

            nums = Array.Empty<double>();

            

            return result.ToString();


        }

        private string MethodForSum(string jetable)
        {
            int i =0;
            string[] NumsStr = jetable.Split('+');
            List<double> nums = new();
            foreach(var num in NumsStr)
            {
                nums.Add(double.Parse(num));
            }

            if (nums[0].ToString().StartsWith("-"))
                i = 1;

            string result = nums.Sum().ToString();
            if (i == 1)
            {
                if (double.Parse(result) > 0)
                    return "+" + result;
                else
                    return result;
            }
            else
            {
                return result;
            }            
            
               
        }                
        private string MethodForDividing(string input)
        {
            int i = 0;
            string[] jetableList = input.Split('/');
            List<double> nums = new();
            foreach (string num in jetableList)
            {
                nums.Add(double.Parse(num));
            }
            if (nums[0].ToString().StartsWith("-"))
                i = 1;
            string result = nums.Aggregate((x, y) => x / y).ToString();
            if (i == 1)
            {
                if (double.Parse(result) > 0)
                    return "+" + result;
                else
                    return result;
            }
            else
            {
                return result;
            };

        }
         
        private string MethodForMultiplication(string input)
        {
            int i = 0;
            string[] NumsStr =input.Split('*');
            List<double> nums = new();

            foreach(var num in NumsStr)
            {
                nums.Add(double.Parse(num));
            }
            if (nums[0].ToString().StartsWith("-"))
                i = 1;

            string result = nums.Aggregate((x, y) => x * y).ToString();

            if (i == 1)
            {
                if (double.Parse(result) > 0)
                    return "+" + result;
                else
                    return result;
            }
            else
            {
                return result;
            }
        }

        private void CheckingDuplicated(Button button)
        {
            try
            {                
                char some = textBox1.Text[textBox1.SelectionStart - 1];
                if (button.Text == "-")
                {
                    if (some == '+' || some == '-' || some == '/' || some == '*' || some == ',')
                    {
                        MessageBox.Show("We can't acces yout resuest please check again your input text");
                    }
                    else
                    {
                        InsertValue(button.Text);
                    }
                }
                else
                {
                    if (some == '+' || some == '-' || some == '/' || some == '*' || some == ',' || some == '(')
                    {
                        MessageBox.Show("We can't acces yout resuest please check again your input text");
                    }
                    else
                    {
                        InsertValue(button.Text);
                    }
                }

                

            }catch(Exception ex)
            {
                
            }
           
            
        }

        #endregion

        
        

       
    }
}
